{
  "version": 3,
  "sources": ["../src/settings.ts", "../src/clock.ts", "../src/phoneticTime.ts", "../src/app.ts"],
  "sourcesContent": ["const unmutedIconName = \"fa-volume-high\"\nconst mutedIconName = \"fa-volume-xmark\"\nconst isMutedStorageKey = \"isMuted\"\n\nexport const getIsMuted = () => {\n  const rawValue = localStorage.getItem(isMutedStorageKey)\n  if (rawValue === null) {\n    return false\n  }\n\n  return Boolean(JSON.parse(rawValue))\n}\n\nexport const setIsMuted = (newState: boolean) => {\n  const volumeIconClasses = getVolumeIcon()?.classList\n\n  if (newState === true) {\n    volumeIconClasses?.replace(unmutedIconName, mutedIconName)\n  } else {\n    volumeIconClasses?.replace(mutedIconName, unmutedIconName)\n  }\n\n  const volumeControl = getVolumeControl()\n  if (volumeControl === null) {\n    return\n  }\n\n  volumeControl.disabled = newState\n  localStorage.setItem(isMutedStorageKey, String(newState))\n}\n\nexport const getVolumeIcon = () => {\n  return document.getElementById(\"volume-icon\") as HTMLElement | null\n}\n\nexport const getVolumeControl = () => {\n  return document.getElementById(\"volume-control\") as HTMLInputElement | null\n}\n", "import { getIsMuted, getVolumeControl } from \"./settings\"\n\nconst clockSecondHand = document.querySelector(\".clock-hand.second\") as HTMLDivElement | null\nconst clockMinuteHand = document.querySelector(\".clock-hand.minute\") as HTMLDivElement | null\nconst clockHourHand = document.querySelector(\".clock-hand.hour\") as HTMLDivElement | null\n\nexport const updateClock = (currentTime: Date) => {\n  if (!clockSecondHand || !clockMinuteHand || !clockHourHand) {\n    throw new Error(\"Could not find one or more of the hands!\")\n  }\n\n  const currentSecond = currentTime.getSeconds()\n  const secondPercentage = currentSecond / 60\n  const secondDegrees = secondPercentage * 360 - 180\n  clockSecondHand.style.setProperty(\"transform\", \"rotate(\" + secondDegrees + \"deg)\")\n\n  const currentMinute = currentTime.getMinutes()\n  const minutePercentage = currentMinute / 60\n  const minuteDegrees = minutePercentage * 360 - 180 + 6 * secondPercentage\n  clockMinuteHand.style.setProperty(\"transform\", \"rotate(\" + minuteDegrees + \"deg)\")\n\n  const currentHour = currentTime.getHours()\n  const hourDegrees =\n    (currentHour / 12) * 360 - 180 + 30 * minutePercentage + 0.1 * secondPercentage\n  clockHourHand.style.setProperty(\"transform\", \"rotate(\" + hourDegrees + \"deg)\")\n}\n\nexport const playChime = () => {\n  if (getIsMuted()) {\n    return\n  }\n\n  try {\n    const chimeSound = document.getElementById(\"chime-sound\") as HTMLAudioElement | null\n    if (chimeSound === null) {\n      return\n    }\n\n    const volumeControl = getVolumeControl()\n    chimeSound.volume = Number(volumeControl ? volumeControl.value : 0) * 0.01\n    chimeSound.play()\n  } catch (exception) {\n    console.error(\"I tried to chime but your browser wouldn't let me \uD83D\uDE22\", exception)\n  }\n}\n", "const timeTitle = document.getElementById(\"time-title\")\n\nexport const updatePhoneticTime = (currentTime: Date) => {\n  const phoneticTime = \"It's \" + getPhoneticTime(currentTime)\n\n  if (timeTitle === null) {\n    return\n  }\n\n  timeTitle.innerText = phoneticTime\n}\n\nconst getPhoneticTime = (currentTime: Date) => {\n  const currentMinute = currentTime.getMinutes()\n  const roundedMinute = Math.round(currentMinute / 5) * 5\n\n  const isAfterHalfPast = roundedMinute > 30\n\n  const currentHour = isAfterHalfPast ? currentTime.getHours() + 1 : currentTime.getHours()\n\n  const hour = getHourAsWord(currentHour)\n  const minute = getMinuteAsWord(roundedMinute)\n\n  if (currentMinute === 0) {\n    return hour + \" o'clock\"\n  } else if (roundedMinute === 60) {\n    return \"nearly \" + hour + \" o'clock\"\n  } else if (roundedMinute === 0) {\n    return \"just gone \" + hour + \" o'clock\"\n  }\n\n  const pastOrTo = isAfterHalfPast ? \"to\" : \"past\"\n\n  let roundingWord = \"\"\n  if (currentMinute > roundedMinute) {\n    roundingWord = \"just gone \"\n  } else if (roundedMinute > currentMinute) {\n    roundingWord = \"nearly \"\n  }\n\n  return roundingWord + minute + \" \" + pastOrTo + \" \" + hour\n}\n\nconst getMinuteAsWord = (currentMinute: number) => {\n  const minuteWords = [\n    \"zero\",\n    \"one\",\n    \"two\",\n    \"three\",\n    \"four\",\n    \"five\",\n    \"six\",\n    \"seven\",\n    \"eight\",\n    \"nine\",\n    \"ten\",\n    \"eleven\",\n    \"twelve\",\n    \"thirteen\",\n    \"fourteen\",\n    \"quarter\",\n    \"sixteen\",\n    \"seventeen\",\n    \"eighteen\",\n    \"nineteen\",\n    \"twenty\",\n    \"twenty-one\",\n    \"twenty-two\",\n    \"twenty-three\",\n    \"twenty-four\",\n    \"twenty-five\",\n    \"twenty-six\",\n    \"twenty-seven\",\n    \"twenty-eight\",\n    \"twenty-nine\",\n    \"half\"\n  ]\n\n  const minuteNumber = currentMinute <= 30 ? currentMinute : 60 - currentMinute\n\n  return minuteWords[minuteNumber]\n}\n\nconst getHourAsWord = (currentHour: number) => {\n  const hourWords = [\n    \"twelve\",\n    \"one\",\n    \"two\",\n    \"three\",\n    \"four\",\n    \"five\",\n    \"six\",\n    \"seven\",\n    \"eight\",\n    \"nine\",\n    \"ten\",\n    \"eleven\",\n    \"twelve\"\n  ]\n\n  const hourNumber = currentHour <= 12 ? currentHour : currentHour - 12\n\n  return hourWords[hourNumber]\n}\n", "import { updateClock, playChime } from \"./clock\"\nimport { updatePhoneticTime } from \"./phoneticTime\"\nimport { getIsMuted, getVolumeIcon, setIsMuted } from \"./settings\"\n\ngetVolumeIcon()?.addEventListener(\"click\", () => {\n  setIsMuted(!getIsMuted())\n})\n\nnew Audio(\"./silence.mp3\").play()\n\nconst initialDate = new Date()\nupdatePhoneticTime(initialDate)\nupdateClock(initialDate)\nsetIsMuted(getIsMuted())\n\nsetTimeout(() => {\n  document.getElementById(\"volume-settings\")?.classList.remove(\"volume-settings-initial\")\n}, 5000)\n\nlet prevMinutes = 60\n\nsetInterval(() => {\n  const currentDate = new Date()\n  const currentMinutes = currentDate.getMinutes()\n\n  updateClock(currentDate)\n\n  if (currentMinutes !== prevMinutes) {\n    updatePhoneticTime(currentDate)\n\n    if (currentMinutes === 0) {\n      playChime()\n    }\n\n    prevMinutes = currentMinutes\n  }\n})\n"],
  "mappings": "oHAAA,IAAMA,EACAC,EACAC,EAEOC,EASAC,EAkBAC,EAIAC,EAnCbC,EAAAC,EAAA,kBAAMR,EAAkB,iBAClBC,EAAgB,kBAChBC,EAAoB,UAEbC,EAAa,IAAM,CAC9B,IAAMM,EAAW,aAAa,QAAQP,CAAiB,EACvD,OAAIO,IAAa,KACR,GAGF,EAAQ,KAAK,MAAMA,CAAQ,CACpC,EAEaL,EAAcM,GAAsB,CAC/C,IAAMC,EAAoBN,EAAc,GAAG,UAEvCK,IAAa,GACfC,GAAmB,QAAQX,EAAiBC,CAAa,EAEzDU,GAAmB,QAAQV,EAAeD,CAAe,EAG3D,IAAMY,EAAgBN,EAAiB,EACnCM,IAAkB,OAItBA,EAAc,SAAWF,EACzB,aAAa,QAAQR,EAAmB,OAAOQ,CAAQ,CAAC,EAC1D,EAEaL,EAAgB,IACpB,SAAS,eAAe,aAAa,EAGjCC,EAAmB,IACvB,SAAS,eAAe,gBAAgB,ICpCjD,IAEMO,EACAC,EACAC,EAEOC,EAqBAC,EA3BbC,EAAAC,EAAA,kBAAAC,IAEMP,EAAkB,SAAS,cAAc,oBAAoB,EAC7DC,EAAkB,SAAS,cAAc,oBAAoB,EAC7DC,EAAgB,SAAS,cAAc,kBAAkB,EAElDC,EAAeK,GAAsB,CAChD,GAAI,CAACR,GAAmB,CAACC,GAAmB,CAACC,EAC3C,MAAM,IAAI,MAAM,0CAA0C,EAI5D,IAAMO,EADgBD,EAAY,WAAW,EACJ,GACnCE,EAAgBD,EAAmB,IAAM,IAC/CT,EAAgB,MAAM,YAAY,YAAa,UAAYU,EAAgB,MAAM,EAGjF,IAAMC,EADgBH,EAAY,WAAW,EACJ,GACnCI,EAAgBD,EAAmB,IAAM,IAAM,EAAIF,EACzDR,EAAgB,MAAM,YAAY,YAAa,UAAYW,EAAgB,MAAM,EAGjF,IAAMC,EADcL,EAAY,SAAS,EAExB,GAAM,IAAM,IAAM,GAAKG,EAAmB,GAAMF,EACjEP,EAAc,MAAM,YAAY,YAAa,UAAYW,EAAc,MAAM,CAC/E,EAEaT,EAAY,IAAM,CAC7B,GAAI,CAAAU,EAAW,EAIf,GAAI,CACF,IAAMC,EAAa,SAAS,eAAe,aAAa,EACxD,GAAIA,IAAe,KACjB,OAGF,IAAMC,EAAgBC,EAAiB,EACvCF,EAAW,OAAS,OAAOC,EAAgBA,EAAc,MAAQ,CAAC,EAAI,IACtED,EAAW,KAAK,CAClB,OAASG,EAAW,CAClB,QAAQ,MAAM,8DAAwDA,CAAS,CACjF,CACF,IC5CA,IAAMC,EAEOC,EAUPC,EA+BAC,EAwCAC,EAnFNC,EAAAC,EAAA,kBAAMN,EAAY,SAAS,eAAe,YAAY,EAEzCC,EAAsBM,GAAsB,CACvD,IAAMC,EAAe,QAAUN,EAAgBK,CAAW,EAEtDP,IAAc,OAIlBA,EAAU,UAAYQ,EACxB,EAEMN,EAAmBK,GAAsB,CAC7C,IAAME,EAAgBF,EAAY,WAAW,EACvCG,EAAgB,KAAK,MAAMD,EAAgB,CAAC,EAAI,EAEhDE,EAAkBD,EAAgB,GAElCE,EAAcD,EAAkBJ,EAAY,SAAS,EAAI,EAAIA,EAAY,SAAS,EAElFM,EAAOT,EAAcQ,CAAW,EAChCE,EAASX,EAAgBO,CAAa,EAE5C,GAAID,IAAkB,EACpB,OAAOI,EAAO,WACT,GAAIH,IAAkB,GAC3B,MAAO,UAAYG,EAAO,WACrB,GAAIH,IAAkB,EAC3B,MAAO,aAAeG,EAAO,WAG/B,IAAME,EAAWJ,EAAkB,KAAO,OAEtCK,EAAe,GACnB,OAAIP,EAAgBC,EAClBM,EAAe,aACNN,EAAgBD,IACzBO,EAAe,WAGVA,EAAeF,EAAS,IAAMC,EAAW,IAAMF,CACxD,EAEMV,EAAmBM,GAA0B,CACjD,IAAMQ,EAAc,CAClB,OACA,MACA,MACA,QACA,OACA,OACA,MACA,QACA,QACA,OACA,MACA,SACA,SACA,WACA,WACA,UACA,UACA,YACA,WACA,WACA,SACA,aACA,aACA,eACA,cACA,cACA,aACA,eACA,eACA,cACA,MACF,EAEMC,EAAeT,GAAiB,GAAKA,EAAgB,GAAKA,EAEhE,OAAOQ,EAAYC,CAAY,CACjC,EAEMd,EAAiBQ,GAAwB,CAC7C,IAAMO,EAAY,CAChB,SACA,MACA,MACA,QACA,OACA,OACA,MACA,QACA,QACA,OACA,MACA,SACA,QACF,EAEMC,EAAaR,GAAe,GAAKA,EAAcA,EAAc,GAEnE,OAAOO,EAAUC,CAAU,CAC7B,ICvGA,IAAAC,EAAAC,EAAA,KAAAC,IACAC,IACAC,IAEAC,EAAc,GAAG,iBAAiB,QAAS,IAAM,CAC/CC,EAAW,CAACC,EAAW,CAAC,CAC1B,CAAC,EAED,IAAI,MAAM,eAAe,EAAE,KAAK,EAEhC,IAAMC,EAAc,IAAI,KACxBC,EAAmBD,CAAW,EAC9BE,EAAYF,CAAW,EACvBF,EAAWC,EAAW,CAAC,EAEvB,WAAW,IAAM,CACf,SAAS,eAAe,iBAAiB,GAAG,UAAU,OAAO,yBAAyB,CACxF,EAAG,GAAI,EAEP,IAAII,EAAc,GAElB,YAAY,IAAM,CAChB,IAAMC,EAAc,IAAI,KAClBC,EAAiBD,EAAY,WAAW,EAE9CF,EAAYE,CAAW,EAEnBC,IAAmBF,IACrBF,EAAmBG,CAAW,EAE1BC,IAAmB,GACrBC,EAAU,EAGZH,EAAcE,EAElB,CAAC",
  "names": ["unmutedIconName", "mutedIconName", "isMutedStorageKey", "getIsMuted", "setIsMuted", "getVolumeIcon", "getVolumeControl", "init_settings", "__esmMin", "rawValue", "newState", "volumeIconClasses", "volumeControl", "clockSecondHand", "clockMinuteHand", "clockHourHand", "updateClock", "playChime", "init_clock", "__esmMin", "init_settings", "currentTime", "secondPercentage", "secondDegrees", "minutePercentage", "minuteDegrees", "hourDegrees", "getIsMuted", "chimeSound", "volumeControl", "getVolumeControl", "exception", "timeTitle", "updatePhoneticTime", "getPhoneticTime", "getMinuteAsWord", "getHourAsWord", "init_phoneticTime", "__esmMin", "currentTime", "phoneticTime", "currentMinute", "roundedMinute", "isAfterHalfPast", "currentHour", "hour", "minute", "pastOrTo", "roundingWord", "minuteWords", "minuteNumber", "hourWords", "hourNumber", "require_app", "__commonJSMin", "init_clock", "init_phoneticTime", "init_settings", "getVolumeIcon", "setIsMuted", "getIsMuted", "initialDate", "updatePhoneticTime", "updateClock", "prevMinutes", "currentDate", "currentMinutes", "playChime"]
}
